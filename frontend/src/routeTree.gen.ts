/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SuggestionsRouteImport } from './routes/suggestions'
import { Route as ReportsRouteImport } from './routes/reports'
import { Route as RecipesRouteImport } from './routes/recipes'
import { Route as LoginRouteImport } from './routes/login'
import { Route as InventoryRouteImport } from './routes/inventory'
import { Route as GroceriesRouteImport } from './routes/groceries'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppInventoryRouteImport } from './routes/app/inventory'
import { Route as AppPathlessLayoutRouteImport } from './routes/app/_pathlessLayout'

const AppRouteImport = createFileRoute('/app')()

const AppRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const SuggestionsRoute = SuggestionsRouteImport.update({
  id: '/suggestions',
  path: '/suggestions',
  getParentRoute: () => rootRouteImport,
} as any)
const ReportsRoute = ReportsRouteImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => rootRouteImport,
} as any)
const RecipesRoute = RecipesRouteImport.update({
  id: '/recipes',
  path: '/recipes',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const InventoryRoute = InventoryRouteImport.update({
  id: '/inventory',
  path: '/inventory',
  getParentRoute: () => rootRouteImport,
} as any)
const GroceriesRoute = GroceriesRouteImport.update({
  id: '/groceries',
  path: '/groceries',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppInventoryRoute = AppInventoryRouteImport.update({
  id: '/inventory',
  path: '/inventory',
  getParentRoute: () => AppRoute,
} as any)
const AppPathlessLayoutRoute = AppPathlessLayoutRouteImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => AppRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/groceries': typeof GroceriesRoute
  '/inventory': typeof InventoryRoute
  '/login': typeof LoginRoute
  '/recipes': typeof RecipesRoute
  '/reports': typeof ReportsRoute
  '/suggestions': typeof SuggestionsRoute
  '/app': typeof AppPathlessLayoutRoute
  '/app/inventory': typeof AppInventoryRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/groceries': typeof GroceriesRoute
  '/inventory': typeof InventoryRoute
  '/login': typeof LoginRoute
  '/recipes': typeof RecipesRoute
  '/reports': typeof ReportsRoute
  '/suggestions': typeof SuggestionsRoute
  '/app': typeof AppPathlessLayoutRoute
  '/app/inventory': typeof AppInventoryRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/groceries': typeof GroceriesRoute
  '/inventory': typeof InventoryRoute
  '/login': typeof LoginRoute
  '/recipes': typeof RecipesRoute
  '/reports': typeof ReportsRoute
  '/suggestions': typeof SuggestionsRoute
  '/app': typeof AppRouteWithChildren
  '/app/_pathlessLayout': typeof AppPathlessLayoutRoute
  '/app/inventory': typeof AppInventoryRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/groceries'
    | '/inventory'
    | '/login'
    | '/recipes'
    | '/reports'
    | '/suggestions'
    | '/app'
    | '/app/inventory'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/groceries'
    | '/inventory'
    | '/login'
    | '/recipes'
    | '/reports'
    | '/suggestions'
    | '/app'
    | '/app/inventory'
  id:
    | '__root__'
    | '/'
    | '/groceries'
    | '/inventory'
    | '/login'
    | '/recipes'
    | '/reports'
    | '/suggestions'
    | '/app'
    | '/app/_pathlessLayout'
    | '/app/inventory'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GroceriesRoute: typeof GroceriesRoute
  InventoryRoute: typeof InventoryRoute
  LoginRoute: typeof LoginRoute
  RecipesRoute: typeof RecipesRoute
  ReportsRoute: typeof ReportsRoute
  SuggestionsRoute: typeof SuggestionsRoute
  AppRoute: typeof AppRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/suggestions': {
      id: '/suggestions'
      path: '/suggestions'
      fullPath: '/suggestions'
      preLoaderRoute: typeof SuggestionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reports': {
      id: '/reports'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof ReportsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/recipes': {
      id: '/recipes'
      path: '/recipes'
      fullPath: '/recipes'
      preLoaderRoute: typeof RecipesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/inventory': {
      id: '/inventory'
      path: '/inventory'
      fullPath: '/inventory'
      preLoaderRoute: typeof InventoryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/groceries': {
      id: '/groceries'
      path: '/groceries'
      fullPath: '/groceries'
      preLoaderRoute: typeof GroceriesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/inventory': {
      id: '/app/inventory'
      path: '/inventory'
      fullPath: '/app/inventory'
      preLoaderRoute: typeof AppInventoryRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/_pathlessLayout': {
      id: '/app/_pathlessLayout'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppPathlessLayoutRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AppRouteChildren {
  AppPathlessLayoutRoute: typeof AppPathlessLayoutRoute
  AppInventoryRoute: typeof AppInventoryRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppPathlessLayoutRoute: AppPathlessLayoutRoute,
  AppInventoryRoute: AppInventoryRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GroceriesRoute: GroceriesRoute,
  InventoryRoute: InventoryRoute,
  LoginRoute: LoginRoute,
  RecipesRoute: RecipesRoute,
  ReportsRoute: ReportsRoute,
  SuggestionsRoute: SuggestionsRoute,
  AppRoute: AppRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
